/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();

app.use(bodyParser.json());

const TODOS_FILE_PATH = './todos.json';

// Function to read todos from file
const readTodosFromFile = () => {
  try {
    const todosData = fs.readFileSync(TODOS_FILE_PATH, 'utf-8');
    return JSON.parse(todosData);
  } catch (error) {
    return [];
  }
};

// Function to write todos to file
const writeTodosToFile = (todos) => {
  fs.writeFileSync(TODOS_FILE_PATH, JSON.stringify(todos));
};

app.get('/todos', (req, res) => {
  const todosArr = readTodosFromFile();
  res.status(200).send(todosArr)
})

app.get('/todos/:id', (req, res) => {
  const todosArr = readTodosFromFile();
  const todo = todosArr.find((todo) => todo.id == req.params.id);
  // console.log(todo);
  if (!todo) {
    res.status(404).json({ error: 'Todo not found' });
  } else {
    res.status(200).json(todo);
  }
})

app.post('/todos', (req, res) => {
  const todosArr = readTodosFromFile();
  const newTodo = {
    "id": Math.floor(Math.random()*100000),
    "title": req.body.title,
    "completed": req.body.completed || false,
    "description": req.body.description
  }
  todosArr.push(newTodo);
  writeTodosToFile(todosArr);
  res.status(201).json({ id: newTodo.id })
})

app.put('/todos/:id', (req, res) => {
  const todosArr = readTodosFromFile();
  const todoIndex = todosArr.findIndex((todo) => todo.id == req.params.id);
  // console.log(todosArr[todoIndex]);

  if (todoIndex === -1) {
    res.status(404).json({ error: 'Todo not found' });
  } else {
    todosArr[todoIndex] = {
      id: req.params.id,
      title: req.body.title,
      description: req.body.description,
      completed: req.body.completed || false,
    }
    writeTodosToFile(todosArr)
    res.status(200).json({ message: 'Todo updated successfully' });
  }
})

app.delete('/todos/:id', (req, res) => {
  const todosArr = readTodosFromFile();
  const updatedTodos = todosArr.filter((todo) => todo.id != req.params.id);
  if (updatedTodos.length === todosArr.length) {
    res.status(404).json({ error: 'Todo not found' });
  } else {
    writeTodosToFile(updatedTodos);
    res.status(200).json({ message: 'Todo deleted successfully' });
  }
})

app.all('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// module.exports = app;
app.listen(8000, () => { console.log("started on port 8000"); })